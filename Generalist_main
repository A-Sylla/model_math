%%%  Generalist predators model %%%%%

clf

global dt alpha1 alpha2 beta mu e1 e2 b c1 c2 c3 d1 d2 theta eta zeta sN lambda1 lambda2 nu1 nu2 gamma rho s1 s2 Lambda delta kappa sigma1 sigma2 

% Model parameters
T = 360;           % period of 360 days
dt = 1;        % time interval of 6 hours (1/4 of a day)
time = 0:dt:T;   % Generate discretization points in time  %% time have (nlength(time)+1) points
n = 9;             % number of habitat patches
K = ones(n,1);    % carrying capacity
alpha1=0.4;       % predation rate of micro predator to prey
alpha2=0.25;       % predation rate of macro predator to prey
beta=0.25;         % predation rates of macro predator to micro
e1=0.1; e2=0.1; b=1;      % beddington
c1=0.7;        % conversion rate of micro predator from prey
c2=0.7;        % conversion rate of macro predator from prey
c3=0.7;        % conversion rate of macro predator from micro predator 
mu=0.05;       % moratlity rate of prey
d1=0.05;       % moratlity rate of micro predator
d2=0.05;       % moratlity rate of macro predator 
theta=0.05;    % bacilli maximal growth rate on prey
lambda1=0.02;  % bacilli maximal growth rate on micro predator
lambda2=0;     % bacilli maximal growth rate on macro predator
eta=0.03;      % bacilli death rate on prey
nu1=0.2;      % bacilli death rate on micro-predator
nu2=0.3;      % bacilli death rate on macro-predator
zeta=0.40;     % bacilli attachment rate on prey
gamma=0.13;    % bacilli attachment rate on micro predator
rho=0.06;   % bacilli attachment rate on macro predator
sN=1;          % half-saturation constant of prey substrate
s1=1;          % half-saturation constant of micro predator substrate
s2=1;          % half-saturation constant of macro predator substrate

r = zeros(n,length(time));     % initialize preys growth rate without disturbance
for t = 1:length(time)
    r(:,t) = [0.15, 0.17, 0.2, 0.23, 0.25, 0.28, 0.31, 0.35, 0.38]; 
end
r15 = zeros(n,length(time));   r15h = zeros(n,length(time));     % preys growth rate of with a 15-day disturbance
r60 = zeros(n,length(time));   r60h = zeros(n,length(time));     % preys growth rate of with a 60-day disturbance 
t6 = randi([1,T]);        % generate a random integer number between 1 and T = disturbance time
for t = 1:length(time)
    if ( t6<mod(time(t),360) ) && ( mod(time(t),360)<=t6+15 )
        r15(:,t) = [0,0,0,0,0,0,0,0,0];                                  %r is reduced by 100% 
        r15h(:,t) = 0.5*[0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];   %r is reduced by 50% 
    else
        r15(:,t) = [0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];
        r15h(:,t) = [0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];
    end
end 
for t = 1:length(time)
    if ( t6<mod(time(t),360) ) && ( mod(time(t),360)<=t6+60 )
        r60(:,t) = [0,0,0,0,0,0,0,0,0];                                  %r is reduced by 100% 
        r60h(:,t) = 0.5*[0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];   %r is reduced by 50% 
    else
        r60(:,t) = [0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];
        r60h(:,t) = [0.15,0.17,0.2,0.23,0.25,0.28,0.31,0.35,0.38];
    end
end 

Lambda = zeros(length(time),1);     % initialize growth rate of free-living bacilli   
for t = 1:length(time)
    if ( 1<=mod(time(t),360) ) && ( mod(time(t),360)<=200 )
        Lambda(t) = 4*wblpdf(mod(time(t),360),100,4) ;  
    else
        Lambda(t) = 0;
    end
end

delta=0.03;    % death rate of free living bacilli
kappa=3;       % Bacilli release rate from dead prey
sigma1=2;      % Bacilli release rate from dead micro predator
sigma2=0;      % Bacilli release rate from dead macro predator

Q=zeros(n,length(time)); W=zeros(n,length(time));         % no environmental disturbances % for micro and macro

%% Initial conditions value
No = [0.05,0.03,0.02,0,0,0,0.002];         % rand(n,1)


%% define and plot species dispersal rates
 
u = 0.7;    % maximal dispersal rate of macro-predators
v = 0;    % maximal dispersal rate of micro-predators
wo = 0;   % preys dispersal rate

% Calculate the solution of the model without disturbance  
[N1,R1,P1,BN1,BR1,BP1,Bo1] = Generalist_model(time,No,n,r,K,u,v,wo,W,Q);  

% Calculate the mean free-living bacteria without disturbance 
Mean_Bo1 = sum(Bo1,1)/n; 

% % migrations rates values
% m = zeros(n,length(time));  z = zeros(n,length(time)); 
% for t = 1:(length(time))
% 	m(:,t) = u./(1+R1(:,t));     % macro-predators
%     z(:,t) = v./(1+N1(:,t));     % micro-predators
% end

% % plot predator dispersal rates 
% figure(1)      
% subplot(2,2,1)   
% plot(time,m); grid on;
% xlabel('Time (days)'); ylabel('dispersal rates'); xlim([0 T]);
% title('macro-predator')
% 
% subplot(2,2,2)    
% plot(time,z); grid on;
% xlabel('Time (days)'); ylabel('dispersal rates'); xlim([0 T]);
% title('micro-predator')


%% Experiment 1: local ecological disturbance (i.e., affecting a single patch) 

t1 = randi([1,length(time)]);        % generate a random integer number between 1 and length(time)
i1 = 4; %randi([1,n]);        % generate a random integer number between 1 and n

% initialize perturbated functions
L10 = zeros(n,length(time)); 
L50 = zeros(n,length(time)); 
L90 = zeros(n,length(time));       

%loss of predator at time t = time(t1) for the patch i1
L10(i1,t1) = 0.1;          % loss of 10% 
L50(i1,t1) = 0.5;          % loss of 50% 
L90(i1,t1) = 0.9;          % loss of 90% 

% Calculate the solution with tree different local disturbances of macro predator  
[N1m,R1m,P1m,BN1m,BR1m,BP1m,Bo1m] = Generalist_model(time,No,n,r,K,u,v,wo,W,L10);     % first scenario (-10%)
[N2m,R2m,P2m,BN2m,BR2m,BP2m,Bo2m] = Generalist_model(time,No,n,r,K,u,v,wo,W,L50);     % second scenario (-50%)
[N3m,R3m,P3m,BN3m,BR3m,BP3m,Bo3m] = Generalist_model(time,No,n,r,K,u,v,wo,W,L90);     % third scenario (-90%)

% Calculate the solution with tree different local disturbances of predators  
[N1mm,R1mm,P1mm,BN1mm,BR1mm,BP1mm,Bo1mm] = Generalist_model(time,No,n,r,K,u,v,wo,L10,L10);     % first scenario (-10%)
[N2mm,R2mm,P2mm,BN2mm,BR2mm,BP2mm,Bo2mm] = Generalist_model(time,No,n,r,K,u,v,wo,L50,L50);     % second scenario (-50%)
[N3mm,R3mm,P3mm,BN3mm,BR3mm,BP3mm,Bo3mm] = Generalist_model(time,No,n,r,K,u,v,wo,L90,L90);     % third scenario (-90%)

% Plot solution with local disturbance
figure(2)       
subplot(2,2,1)   % only macro-predators perturbed
plot(time,Bo1(i1,:),'g',time,Bo1m(i1,:),'b--',time,Bo2m(i1,:),'m--',time,Bo3m(i1,:),'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Free-living bacterial density'); 
title({['time = ',num2str(time(t1)),' for the patch ',num2str(i1)]})
legend('without','-10%','-50%','-90');

subplot(2,2,3)   % both predators perturbed 
plot(time,Bo1(i1,:),'g',time,Bo1mm(i1,:),'b--',time,Bo2mm(i1,:),'m--',time,Bo3mm(i1,:),'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Free-living bacterial density'); 
title({['time = ',num2str(time(t1)),' for the patch ',num2str(i1)]})
legend('without','-10%','-50%','-90');  


%% Experiment 2: regional ecological disturbance affecting predators

% initialize synchronised disturbances function
G10_syn = zeros(n,length(time)); 
G50_syn = zeros(n,length(time)); 
G90_syn = zeros(n,length(time));   

% generate n random numbers between 1 and length(time)
t2 = randi([1,length(time)],n,1) ;      

% Loss of macro-predator at time t=to for each patch
G10_syn(:, min(t2)) = 0.1 * ones(n, 1); % 10% loss
G50_syn(:, min(t2)) = 0.5 * ones(n, 1); % 50% loss
G90_syn(:, min(t2)) = 0.9 * ones(n, 1); % 90% loss 

% Calculate the solution with three different synchronised disturbance 
[N1s,R1s,P1s,BN1s,BR1s,BP1s,Bo1s] = Generalist_model(time,No,n,r,K,u,v,wo,G10_syn,G10_syn);     % first scenario (-10%)
[N2s,R2s,P2s,BN2s,BR2s,BP2s,Bo2s] = Generalist_model(time,No,n,r,K,u,v,wo,G50_syn,G50_syn);     % second scenario (-50%)
[N3s,R3s,P3s,BN3s,BR3s,BP3s,Bo3s] = Generalist_model(time,No,n,r,K,u,v,wo,G90_syn,G90_syn);     % third scenario (-90%)

% Mean free-living bacteria with synchronised disturbance
Mean_Bo1s = sum(Bo1s,1)/n;      % first scenario (-10%)
Mean_Bo2s = sum(Bo2s,1)/n;      % second scenario (-50%)
Mean_Bo3s = sum(Bo3s,1)/n;      % third scenario (-90%)


% initialize asynchronised disturbances function
G10_asyn = zeros(n,length(time)); 
G50_asyn = zeros(n,length(time)); 
G90_asyn = zeros(n,length(time));    

% loss of 10% of predator at time t = time(t2(i)) for the patch i 
for i=1:n 
    G10_asyn(i,t2(i)) = 0.1;     % loss of 10% 
    G50_asyn(i,t2(i)) = 0.5;     % loss of 50% 
    G90_asyn(i,t2(i)) = 0.9;     % loss of 90% 
end 

% Calculate the solution with three different asynchronized disturbance
[N1as,R1as,P1as,BN1as,BR1as,BP1as,Bo1as] = Generalist_model(time,No,n,r,K,u,v,wo,G10_asyn,G10_asyn);     % first scenario (-10%)
[N2as,R2as,P2as,BN2as,BR2as,BP2as,Bo2as] = Generalist_model(time,No,n,r,K,u,v,wo,G50_asyn,G50_asyn);     % second scenario (-50%)
[N3as,R3as,P3as,BN3as,BR3as,BP3as,Bo3as] = Generalist_model(time,No,n,r,K,u,v,wo,G90_asyn,G90_asyn);     % third scenario (-90%)

% Mean free-living bacteria with asynchronised disturbance 
Mean_Bo1as = sum(Bo1as,1)/n;      % first scenario (-10%)
Mean_Bo2as = sum(Bo2as,1)/n;      % second scenario (50%)
Mean_Bo3as = sum(Bo3as,1)/n;      % third scenario (-90%)

% initialize low uniform disturbances function
U10_low = zeros(n,length(time)); 
U50_low = zeros(n,length(time)); 
U90_low = zeros(n,length(time));    

% initialize high uniform disturbances function
U10_high = zeros(n,length(time)); 
U50_high = zeros(n,length(time)); 
U90_high = zeros(n,length(time));   

 % generate the first random value between 1 and 100
to = randi([1,100/dt]);       
% Create a value vector with high frequency between disturbances (5 days)
t3 = to + (0:n-1)*5;   
% Create a value vector with low frequency between disturbances (20 days)
t4 = to + (0:n-1)*20;   

%loss of 10% of predator at time t = time(t3(i)) for the patch i 
for i=1:n 
    U10_low(i,t4(i)) = 0.1;     % loss of 10% 
    U50_low(i,t4(i)) = 0.5;     % loss of 50% 
    U90_low(i,t4(i)) = 0.9;     % loss of 90% 
    
    U10_high(i,t3(i)) = 0.1;     % loss of 10%  
    U50_high(i,t3(i)) = 0.5;     % loss of 50% 
    U90_high(i,t3(i)) = 0.9;     % loss of 90%    
end

% Calculate the solution with three different low uniform disturbance 
[N1u,R1u,P1u,BN1u,BR1u,BP1u,Bo1u] = Generalist_model(time,No,n,r,K,u,v,wo,U10_low,U10_low);     % first scenario (-10%)
[N2u,R2u,P2u,BN2u,BR2u,BP2u,Bo2u] = Generalist_model(time,No,n,r,K,u,v,wo,U50_low,U50_low);     % second scenario (-50%)
[N3u,R3u,P3u,BN3u,BR3u,BP3u,Bo3u] = Generalist_model(time,No,n,r,K,u,v,wo,U90_low,U90_low);     % third scenario (-90%)
% Mean free-living bacteria with low uniform global disturbance 
Mean_Bo1u = sum(Bo1u,1)/n;      % first scenario (-10%)
Mean_Bo2u = sum(Bo2u,1)/n;      % second scenario (50%)
Mean_Bo3u = sum(Bo3u,1)/n;      % third scenario (-90%)

% Calculate the solution with three different high uniform disturbance 
[N1h,R1h,P1h,BN1h,BR1h,BP1h,Bo1h] = Generalist_model(time,No,n,r,K,u,v,wo,U10_high,U10_high);     % first scenario (-10%)
[N2h,R2h,P2h,BN2h,BR2h,BP2h,Bo2h] = Generalist_model(time,No,n,r,K,u,v,wo,U50_high,U50_high);     % second scenario (-50%)
[N3h,R3h,P3h,BN3h,BR3h,BP3h,Bo3h] = Generalist_model(time,No,n,r,K,u,v,wo,U90_high,U90_high);     % third scenario (-90%)
% Mean free-living bacteria with high uniform disturbance 
Mean_Bo1h = sum(Bo1h,1)/n;      % first scenario (-10%)
Mean_Bo2h = sum(Bo2h,1)/n;      % second scenario (50%)
Mean_Bo3h = sum(Bo3h,1)/n;      % third scenario (-90%)

% Disturbance with heterogeneous severity among patches
Dr = zeros(n,length(time));         % initialize random disturbance function 
Dc = zeros(n,length(time));         % initialize decrease-gradient disturbance function 
Dd = zeros(n,length(time));         % initialize gradient disturbance function 

i2 = rand(1,n);       % generate n random integers numbers between 0 and 1
v2 = sort(i2);              % arrange the vector i2 in ascending order
u2 = sort(i2,'descend');    % arrange the vector i2 in descending order 

%loss of predator at time t = time(t1) 
for i=1:n 
     Dr(i,t1) = i2(i);         % loss of i2(i) for patch i
     Dc(i,t1) = v2(i);         % loss of v(i) for patch i
     Dd(i,t1) = u2(i);         % loss of u(i) for patch i
end       

% Calculate the solution with heterogeneous severity disturbance
[N1gr,R1gr,P1gr,BN1gr,BR1gr,BP1gr,Bo1gr] = Generalist_model(time,No,n,r,K,u,v,wo,Dr,Dr);  % random impact
[N1gd,R1gd,P1gd,BN1gd,BR1gd,BP1gd,Bo1gd] = Generalist_model(time,No,n,r,K,u,v,wo,Dd,Dd);  % positively maximal impact
[N1gc,R1gc,P1gc,BN1gc,BR1gc,BP1gc,Bo1gc] = Generalist_model(time,No,n,r,K,u,v,wo,Dc,Dc);  % negatively maximal impact
% Mean free-living bacteria with heterogeneous severity disturbance 
Mean_Bo1gr = sum(Bo1gr,1)/n;   
Mean_Bo1gd = sum(Bo1gd,1)/n;
Mean_Bo1gc = sum(Bo1gc,1)/n;

% plot solution with synchronised, asynchronised, uniform disturbances
figure(3)      
subplot(4,2,1)  % synchronised
plot(time,Mean_Bo1,'g',time,Mean_Bo1s,'b--',time,Mean_Bo2s,'m--',time,Mean_Bo3s,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean free-living bacterial'); 
%legend('without','-10%','-50%','-90');
title({['(a) perturbation at time = ',num2str(time(min(t2)))]})

subplot(4,2,2)    % asynchronised
plot(time,Mean_Bo1,'g',time,Mean_Bo1as,'b--',time,Mean_Bo2as,'m--',time,Mean_Bo3as,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean free-living bacterial'); 
title({['(b) time = ',mat2str(time(t2))]})

subplot(4,2,3)  % high uniform
plot(time,Mean_Bo1,'g',time,Mean_Bo1h,'b--',time,Mean_Bo2h,'m--',time,Mean_Bo3h,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean free-living bacterial');
%title('c'); %legend('without','-10%','-50%','-90');
title({['(c) time = ',mat2str(time(t3))]})

subplot(4,2,4)  % low uniform
plot(time,Mean_Bo1,'g',time,Mean_Bo1u,'b--',time,Mean_Bo2u,'m--',time,Mean_Bo3u,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean free-living bacterial'); 
title('d'); %legend('without','-10%','-50%','-90');
title({['(d) time = ',mat2str(time(t4))]})

% Plot solution with heterogeneous severity disturbance 
ye = [1, 0.84, 0] ; % choose yellow color
br = [0.85, 0.33, 0.1] ; % choose brown color
     
subplot(4,2,5)   % Mean free-living bacteria 
plot(time, Mean_Bo1, 'g', 'LineWidth', 2); hold on;
plot(time, Mean_Bo1gr, 'c--', 'LineWidth', 2);
plot(time, Mean_Bo1gd, '--', 'Color', br, 'LineWidth', 2); 
plot(time, Mean_Bo1gc, '--','Color', ye, 'LineWidth', 2);
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean Free-living bacterial density');
title({['(e) time = ',num2str(time(t1))]}); grid on;   hold off;  


subplot(4,2,7)   % free-living bacteria of community 9
plot(time, Bo1(9,:), 'g', 'LineWidth', 2); hold on;
plot(time, Bo1gr(9,:), 'c--', 'LineWidth', 2);
plot(time, Bo1gd(9,:), '--', 'Color', br, 'LineWidth', 2); 
plot(time, Bo1gc(9,:), '--','Color', ye, 'LineWidth', 2);
xlabel('Time (days)'); xlim([0 T]); %ylabel('Free-living bacterial density');  
title({['(f) time = ',num2str(time(t1))]}); grid on;  hold off;

subplot(4,2,8)   % free-living bacteria of community 1
plot(time, Bo1(1,:), 'g', 'LineWidth', 2); hold on;
plot(time, Bo1gr(1,:), 'c--', 'LineWidth', 2);
plot(time, Bo1gd(1,:), '--', 'Color', br, 'LineWidth', 2); 
plot(time, Bo1gc(1,:), '--','Color', ye, 'LineWidth', 2);
xlabel('Time (days)'); xlim([0 T]); %ylabel('Free-living bacterial density');  
title({['(g) time = ',num2str(time(t1))]}); grid on;  hold off;


%% Experiment 3: regional ecological disturbance also affecting preys 

Dr = zeros(n,length(time));      % initialize random disturbance function 
i2 = rand(1,n);         % generate n random integers numbers between 0 and 1
Dr(:,t1) = i2;         % loss of i2(i) of predators at time t = time(t1) for the patch i 

% Calculate the solution with large disturbance 
% reduction of 100% reproducton
[N15,R15,P15,BN15,BR15,BP15,Bo15] = Generalist_model(time,No,n,r15,K,u,v,wo,Dr,Dr);   % impact of 15 days 
[N60,R60,P60,BN60,BR60,BP60,Bo60] = Generalist_model(time,No,n,r60,K,u,v,wo,Dr,Dr);   % impact of 60 days

% reduction of 50% of reproducton
[N15h,R15h,P15h,BN15h,BR15h,BP15h,Bo15h] = Generalist_model(time,No,n,r15h,K,u,v,wo,Dr,Dr);   % impact of 15 days 
[N60h,R60h,P60h,BN60h,BR60h,BP60h,Bo60h] = Generalist_model(time,No,n,r60h,K,u,v,wo,Dr,Dr);   % impact of 60 days

% Mean free-living bacteria with large disturbance 
% absence reproduction
Mean_Bo15 = sum(Bo15,1)/n;
Mean_Bo60 = sum(Bo60,1)/n;

% reduction reproduction
Mean_Bo15h = sum(Bo15h,1)/n;
Mean_Bo60h = sum(Bo60h,1)/n;

% Plot solution 
figure(4)      
subplot(2,2,1)   % reduction of 50% reproduction   
plot(time,Mean_Bo1,'g',time,Mean_Bo15h,'b--',time,Mean_Bo60h,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean Free-living bacterial density');
title({['time = ',num2str(time(t1))]})
legend('without','15 days','60 days'); 

subplot(2,2,3)   % reduction of 100% reproduction
plot(time,Mean_Bo1,'g',time,Mean_Bo15,'b--',time,Mean_Bo60,'r--','LineWidth',2); grid on;
xlabel('Time (days)'); xlim([0 T]); %ylabel('Mean Free-living bacterial density');
title({['time = ',num2str(time(t1))]})
legend('without','15 days','60 days'); 



%%  Automatic calculation of metrics for Experiment 2

% List of scenarios to be analyzed
% Scenario name                     Perturbed value       Time of disturbance (days)
scenarios = {
    'Synchrone - 50%',              Mean_Bo2s,            tt(min(t2));
    'Asynchrone - 50%',             Mean_Bo2as,           min(tt(t2));  % first period of disturbance
    'High uniforme - 50%',          Mean_Bo2h,            min(tt(t3)); 
    'Low uniforme - 50%',           Mean_Bo2u,            min(tt(t4)); 
    'Decrease-gradient',            Mean_Bo1gc,           tt(t1);
    'Increase-gradient',            Mean_Bo1gd,           tt(t1);
    'Random gradient',              Mean_Bo1gr,           tt(t1);
};

% Initialization of results table
nz = size(scenarios, 1);
results = cell(nz+1, 5);
results(1,:) = {'Scenario', '?_peak', 't_peak (days)', 'T_resilience (days)', 'B_eq_post'};

% Parameters for equilibrium calculation
eq_interval = [280 360];   %Adjust according to observations

% Analysis iteration
for i = 1:nz
    label = scenarios{i,1};
    Bo_test = scenarios{i,2};
    t_perturb = scenarios{i,3};  

    [dp, t_res, beq, tpeak] = analyze_disturbance(tt, Mean_Bo1, Bo_test, t_perturb, eq_interval);

    results{i+1,1} = label;
    results{i+1,2} = round(dp, 4);
    results{i+1,3} = round(tpeak, 1);
    results{i+1,4} = round(t_res, 1);
    results{i+1,5} = round(beq, 4);
end

% Display results
disp('=== Synthetic resilience results ===')
disp(results)

%%  Automatic calculation of metrics for Experiment 3

% List of scenarios to be analyzed
% Scenario name                             Perturbed value        Time of disturbance (days)
scenarios = {
    'Prey reduction (15 days) - 50%',           Mean_Bo15h,           tt(t6);
    'Prey reduction (60 days) - 50%',           Mean_Bo60h,           tt(t6);  
    'Prey reduction (15 days) - 100%',          Mean_Bo15,            tt(t6); 
    'Prey reduction (60 days) - 100%',          Mean_Bo60,            tt(t6); 
};

% Initialization of results table
nz = size(scenarios, 1);
results = cell(nz+1, 5);
results(1,:) = {'Scenario', '?_peak', 't_peak (days)', 'T_resilience (days)', 'B_eq_post'};

% Parameters for equilibrium calculation
eq_interval = [280 360];   %Adjust according to observations

% Analysis iteration
for i = 1:nz
    label = scenarios{i,1};
    Bo_test = scenarios{i,2};
    t_perturb = scenarios{i,3};  

    [dp, t_res, beq, tpeak] = analyze_disturbance(tt, Mean_Bo1, Bo_test, t_perturb, eq_interval);

    results{i+1,1} = label;
    results{i+1,2} = round(dp, 4);
    results{i+1,3} = round(tpeak, 1);
    results{i+1,4} = round(t_res, 1);
    results{i+1,5} = round(beq, 4);
end

% Display results
disp('=== Synthetic resilience results ===')
disp(results)
